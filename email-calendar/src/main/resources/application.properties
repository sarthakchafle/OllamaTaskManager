spring.application.name=email-calendar
server.port=9000

# URLs for the other microservices
email.sender.service.url=http://localhost:8081

# Local LLM (Llama 3) API Configuration
# IMPORTANT: Replace with the actual URL of your local Llama 3 API endpoint.
# This often looks like http://localhost:11434/v1/chat/completions for Ollama.
# If you are using Ollama's /api/generate endpoint, you might need to adjust the prompt
# and response parsing in TaskPlannerService.java accordingly.
local.llm.api.url=http://localhost:11434/v1/chat/completions

# Google Calendar API Configuration
# IMPORTANT: Please follow these steps carefully:
# 1. Create a Service Account in Google Cloud Console (IAM & Admin -> Service Accounts).
# 2. Generate a JSON key for this service account and save it.
# 3. RENAME THIS JSON FILE to 'service-account-key.json' (or any simple name you prefer).
# 4. PLACE THIS RENAMED JSON FILE DIRECTLY INTO YOUR 'src/main/resources/' FOLDER
#    of your task-planner project. It should be alongside application.properties.
#    Example: YourProjectRoot/task-planner/src/main/resources/service-account-key.json
# 5. Ensure the 'google.calendar.service-account.key-path' property below
#    EXACTLY MATCHES the filename you chose in step 3.
#    Example: google.calendar.service-account.key-path=service-account-key.json
# 6. Share the Google Calendar you want to modify with the email address of this service account,
#    granting it "Make changes to events" permission.
# 7. Replace 'your-calendar-id@group.calendar.google.com' with the actual ID of your Google Calendar.
#    (You can find this in Calendar Settings -> Integrate calendar -> Calendar ID)
google.calendar.service-account.key-path=service-account-key.json
google.calendar.id=
